/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package my.Login;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import my.Classes.*; 
import static my.Classes.FileLocationInterface.ordersFilePath;
import static my.Classes.FileLocationInterface.taskFilePath;

/**
 * 
 * @author dvdmi
 */
public class VendorFinishOrder extends javax.swing.JFrame {
    Vendor vendorAcc;
    Customer custAcc;
    ArrayList<String> selectedOrder;
    /**
     * Creates new form VendorFinishOrder
     */
    public VendorFinishOrder() {
        initComponents();
    }
    
    public VendorFinishOrder(Vendor vendorAccount, Customer custAcc, ArrayList<String> selectedOrder) {
        initComponents();
        this.vendorAcc = vendorAccount;
        this.selectedOrder = selectedOrder;
        this.custAcc = custAcc;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        FinishButton = new javax.swing.JButton();
        BackButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        FinishButton.setText("Finish");
        FinishButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FinishButtonActionPerformed(evt);
            }
        });

        BackButton.setText("Back");
        BackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(FinishButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56)
                .addComponent(BackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(77, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(116, 116, 116)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FinishButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(138, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void FinishButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FinishButtonActionPerformed
        // TODO add your handling code here:
        updateOrderStatusToDone(selectedOrder.get(0));
    writeToTaskFile(selectedOrder.get(0));
    
    VendorOrders Vorder = new VendorOrders(vendorAcc, custAcc);
    Vorder.setVisible(true);
    this.dispose(); 
    }              
    
    private void updateOrderStatusToDone(String orderID) {
    try {
        // Read the content of the Orders.txt file
        File ordersFile = new File(ordersFilePath);
        List<String> lines = new ArrayList<>();
        Scanner scanner = new Scanner(ordersFile);

        while (scanner.hasNextLine()) {
            String orderData = scanner.nextLine();
            String[] orderDetails = orderData.split(",");

            // Check if the OrderID matches the desired order
            if (orderDetails.length >= 9 && orderDetails[0].equals(orderID)) {
                // Update the order status to "done"
                orderDetails[5] = "done";
                orderData = String.join(",", orderDetails);
            }

            // Add the line to the list
            lines.add(orderData);
        }

        scanner.close();

        // Write the updated content back to the Orders.txt file
        FileWriter writer = new FileWriter(ordersFile);
        for (String line : lines) {
            writer.write(line + System.lineSeparator());
        }
        writer.close();
    } catch (IOException e) {
        e.printStackTrace();
    }        
}
    
    private void writeToTaskFile(String orderID) {
        File ordersFile = new File(ordersFilePath);
        File taskFile = new File(taskFilePath);

        // Create an instance of currentDate to get the current time
        currentDate cDate = new currentDate();

        try (Scanner scanner = new Scanner(ordersFile)) {
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(taskFile, true))) {

                while (scanner.hasNextLine()) {
                    String orderData = scanner.nextLine();
                    String[] orderDetails = orderData.split(",");

                    // Check if the order status is "done"
                    if (orderDetails.length >= 6 && orderDetails[0].equals(orderID) && orderDetails[5].equals("done")) {
                        // Format: OrderID, time, runner("none" if task is not accepted by anyone yet), taskFinished (boolean)
                        writer.write(orderID + "," + cDate.getCurrentTime() + "," + "none" + "," + "false");
                        writer.newLine();
                        break; // Exit the loop since we found the order
                    }
                }

                System.out.println("Entry added to task.txt");
            } catch (IOException e) {
                e.printStackTrace();
                System.err.println("Error appending to task.txt");
            }
        } catch (IOException e) {
            e.printStackTrace();
            System.err.println("Error reading from orders.txt");
        }
    }//GEN-LAST:event_FinishButtonActionPerformed

    private void BackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackButtonActionPerformed
        // TODO add your handling code here:
        VendorOpenDetails vOD = new VendorOpenDetails(vendorAcc, selectedOrder);
        vOD.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_BackButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VendorFinishOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VendorFinishOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VendorFinishOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VendorFinishOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VendorFinishOrder().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackButton;
    private javax.swing.JButton FinishButton;
    // End of variables declaration//GEN-END:variables
}
