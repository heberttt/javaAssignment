package my.Login;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;
import javax.swing.table.DefaultTableModel;
import my.Classes.*;
import static my.Classes.FileLocationInterface.ordersFilePath;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/** 
 *
 * @author dvdmi
 */

public class VendorOrders extends javax.swing.JFrame {
    Vendor vendorAcc;
    private ArrayList<String> selectedOrder;
    /**
     * Creates new form VendorOrders
     */
    public VendorOrders() {
        initComponents();
    }
    
    public VendorOrders(Vendor VendorAccount) {
        initComponents();
        this.vendorAcc = VendorAccount;
        LoadVendorOrderData();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        OpenDetailsButton = new javax.swing.JButton();
        AcceptOrderButton = new javax.swing.JButton();
        DeclineOrderButton = new javax.swing.JButton();
        OngoingOrderButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        OrderTable = new javax.swing.JTable();
        BackButton = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        OpenDetailsButton.setText("Open Details");
        OpenDetailsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenDetailsButtonActionPerformed(evt);
            }
        });

        AcceptOrderButton.setText("Accept Order");
        AcceptOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AcceptOrderButtonActionPerformed(evt);
            }
        });

        DeclineOrderButton.setText("Decline Order");
        DeclineOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeclineOrderButtonActionPerformed(evt);
            }
        });

        OngoingOrderButton.setText("Ongoing Order");
        OngoingOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OngoingOrderButtonActionPerformed(evt);
            }
        });

        OrderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "OrderID", "Date", "Time", "CustomerID", "Order Status"
            }
        ));
        OrderTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                OrderTableMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(OrderTable);

        BackButton.setText("Back");
        BackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 590, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(OpenDetailsButton)
                                .addGap(35, 35, 35)
                                .addComponent(AcceptOrderButton)
                                .addGap(45, 45, 45)
                                .addComponent(DeclineOrderButton)
                                .addGap(36, 36, 36)
                                .addComponent(OngoingOrderButton)
                                .addGap(42, 42, 42))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(310, 310, 310)
                        .addComponent(BackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(414, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AcceptOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(OpenDetailsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DeclineOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(OngoingOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(BackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(49, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void LoadVendorOrderData() {
    try {
        File vOrder = new File(ordersFilePath);
        Scanner scanner = new Scanner(vOrder);

        ArrayList<ArrayList<String>> orderData = new ArrayList<>();

        while (scanner.hasNextLine()) {
            String data = scanner.nextLine();
            String[] dataArr = data.split(",");

            // Ensure that the line has enough parts to avoid ArrayIndexOutOfBoundsException
            if (dataArr.length >= 9) {
                // Convert vendorAcc.getVendorID() to String for proper comparison
                if (dataArr[4].equals(String.valueOf(vendorAcc.getVendorID()))) {
                    // Add only the required columns to the list
                    if (dataArr[5].equals("done")){
                        continue;
                    }
                    ArrayList<String> order = new ArrayList<>();
                    order.add(dataArr[0]);
                    order.add(dataArr[1]);
                    order.add(dataArr[2]);
                    order.add(dataArr[3]);
                    order.add(dataArr[5]);

                    orderData.add(order);
                }
            }
        }

        // Assuming you have a JTable component named NotificationTable
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("OrderID");
        model.addColumn("Date");
        model.addColumn("Time");
        model.addColumn("CustomerID");
        model.addColumn("OrderStatus");

        for (ArrayList<String> order : orderData) {
            model.addRow(order.toArray());
        }

        OrderTable.setModel(model);
        
    } catch (FileNotFoundException e) {
        e.printStackTrace();
    }}
    private void BackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackButtonActionPerformed
        // TODO add your handling code here:
        VendorHomepage hp = new VendorHomepage(vendorAcc); // to go to the VendorMenu
        hp.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_BackButtonActionPerformed

    private void OpenDetailsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenDetailsButtonActionPerformed
        // TODO add your handling code here:
        if (selectedOrder != null && !selectedOrder.isEmpty()) {
        // Create a VendorOngoingOrder object and pass the selected order information
        VendorOpenDetails OpenD = new VendorOpenDetails(vendorAcc, selectedOrder);
        OpenD.setVisible(true);
        this.dispose();}
        else{
            System.out.println("No order selected");
        }
    }//GEN-LAST:event_OpenDetailsButtonActionPerformed

    private void AcceptOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AcceptOrderButtonActionPerformed
        // Check if an order is selected
    if (selectedOrder != null && !selectedOrder.isEmpty()) {
        // Create a VendorOngoingOrder object and pass the selected order information
        VendorOngoingOrder ongoingOrderPage = new VendorOngoingOrder(vendorAcc, selectedOrder);
        
        // Show the VendorOngoingOrder page
        ongoingOrderPage.setVisible(true);
        this.dispose();

        // Optionally, you can remove the selected order from the table
        DefaultTableModel model = (DefaultTableModel) OrderTable.getModel();
        model.removeRow(OrderTable.getSelectedRow());
    }
    }//GEN-LAST:event_AcceptOrderButtonActionPerformed

    private void DeclineOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeclineOrderButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DeclineOrderButtonActionPerformed

    private void OngoingOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OngoingOrderButtonActionPerformed
        // TODO add your handling code here:
        VendorOngoingOrder Onorder = new VendorOngoingOrder(vendorAcc, selectedOrder);
        Onorder.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_OngoingOrderButtonActionPerformed

    private void OrderTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OrderTableMouseReleased
        // TODO add your handling code here:
        int rowIndex = OrderTable.getSelectedRow();

    if (rowIndex != -1) {
        // Get the data of the selected order
        ArrayList<String> rowData = new ArrayList<>();
        for (int i = 0; i < OrderTable.getColumnCount(); i++) {
            rowData.add(OrderTable.getValueAt(rowIndex, i).toString());
        }

        // Assign the local variable to the class-level variable
        selectedOrder = rowData;
    }
    }//GEN-LAST:event_OrderTableMouseReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VendorOrders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VendorOrders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VendorOrders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VendorOrders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VendorOrders().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AcceptOrderButton;
    private javax.swing.JToggleButton BackButton;
    private javax.swing.JButton DeclineOrderButton;
    private javax.swing.JButton OngoingOrderButton;
    private javax.swing.JButton OpenDetailsButton;
    private javax.swing.JTable OrderTable;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
